!function(t,s){"use strict";const e={width:800,height:600,backgroundColor:"#fcfcfa",tools:["pencil","pen","marker","eraser","lasso","ruler"],colors:["#000000","#FF3B30","#FF9500","#FFCC00","#4CD964","#5AC8FA","#0579FF","#5856D6","#FFFFFF"],exportFormat:"svg",theme:"light"};class i{constructor(t,i={}){if(this.config={...e,...i},this.container="string"==typeof t?s.querySelector(t):t,!this.container)throw new Error("SketchWidget: Container element not found");this.lassoActive=!1,this.lassoPoints=[],this.lassoSelectedStrokes=[],this.lassoDragging=!1,this.lassoDragStart=null,this.lassoLastPos=null,this.lassoScale=1,this.rulerActive=!1,this.rulerStart=null,this.rulerEnd=null,this.panY=0,this.isPanning=!1,this.lastPanY=0,this.toolThickness={pencil:3,pen:5,marker:10,eraser:15},this.init()}init(){this.createHTML(),setTimeout(()=>{this.setupCanvas(),this.setupTools(),this.setupEventListeners(),this.initializeState()},0)}createHTML(){const t=this.container.getBoundingClientRect();if(!(0!==t.width&&0!==t.height||"100%"!==this.config.width&&"100%"!==this.config.height))return void setTimeout(()=>this.createHTML(),50);const s="100%"===this.config.width?t.width:"string"==typeof this.config.width&&this.config.width.includes("%")?parseFloat(this.config.width)/100*t.width:parseInt(this.config.width),e="100%"===this.config.height?t.height:"string"==typeof this.config.height&&this.config.height.includes("%")?parseFloat(this.config.height)/100*t.height:parseInt(this.config.height);this.actualWidth=s||800,this.actualHeight=e||600,this.container.innerHTML=`\n        <div class="sketch-widget" style="position: relative; display: flex; flex-direction: column; width: ${this.config.width}; height: ${this.config.height};">\n          <div class="canvas-container" style="display: flex; justify-content: center; align-items: flex-start; margin-bottom: 20px; flex: 1; width: 100%; height: 100%;">\n            <canvas class="sketch-canvas" width="${this.actualWidth}" height="${this.actualHeight}" style="\n              background: ${this.config.backgroundColor};\n              border-radius: 12px;\n              box-shadow: 0 4px 16px rgba(0,0,0,0.1);\n              border: 1px solid #e0e0e0;\n              touch-action: none;\n              -webkit-user-select: none;\n              user-select: none;\n              max-width: 100%;\n              max-height: 100%;\n              width: ${this.actualWidth}px;\n              height: ${this.actualHeight}px;\n            "></canvas>\n          </div>\n          <div class="sketch-toolbar" style="\n            display: flex;\n            align-items: center;\n            background: #fff;\n            box-shadow: 0 4px 16px rgba(0,0,0,0.1);\n            padding: 8px 16px;\n            gap: 8px;\n            border-radius: 20px;\n            justify-content: center;\n            margin: 0 auto;\n            width: fit-content;\n            flex-shrink: 0;\n          ">\n            <div class="toolbar-tools" style="\n              display: grid;\n              grid-template-columns: repeat(3, 1fr);\n              gap: 4px;\n              border-right: 1px solid #e0e0e0;\n              padding-right: 12px;\n            ">\n              ${this.config.tools.map(t=>`\n                <button class="tool-btn" data-tool="${t}" style="\n                  border: none;\n                  background: #f4f4f4;\n                  border-radius: 50%;\n                  width: 32px;\n                  height: 32px;\n                  font-size: 14px;\n                  cursor: pointer;\n                  transition: all 0.2s;\n                " title="${t.charAt(0).toUpperCase()+t.slice(1)}">${this.getToolIcon(t)}</button>\n              `).join("")}\n            </div>\n            <div class="toolbar-controls" style="\n              display: flex;\n              gap: 6px;\n              align-items: center;\n              border-right: 1px solid #e0e0e0;\n              padding-right: 12px;\n            ">\n              <input type="range" class="thickness-slider" min="1" max="30" value="3" style="\n                width: 60px;\n                height: 4px;\n                border-radius: 4px;\n                background: #e0e0e0;\n              ">\n              <button class="undo-btn" style="\n                border: none;\n                background: #f4f4f4;\n                border-radius: 50%;\n                width: 32px;\n                height: 32px;\n                font-size: 14px;\n                cursor: pointer;\n              ">‚Ü©Ô∏è</button>\n              <button class="redo-btn" style="\n                border: none;\n                background: #f4f4f4;\n                border-radius: 50%;\n                width: 32px;\n                height: 32px;\n                font-size: 14px;\n                cursor: pointer;\n              ">‚Ü™Ô∏è</button>\n              <button class="export-btn" style="\n                border: none;\n                background: #f4f4f4;\n                border-radius: 50%;\n                width: 32px;\n                height: 32px;\n                font-size: 14px;\n                cursor: pointer;\n              ">üíæ</button>\n            </div>\n            <div class="color-swatches" style="\n              display: flex;\n              gap: 4px;\n              flex-wrap: wrap;\n              max-width: 120px;\n            ">\n              ${this.config.colors.map(t=>`\n                <button class="color-swatch" data-color="${t}" style="\n                  width: 18px;\n                  height: 18px;\n                  border-radius: 50%;\n                  border: 1px solid #e0e0e0;\n                  background: ${t};\n                  cursor: pointer;\n                  transition: all 0.2s;\n                ${"#FFFFFF"===t?"border: 1px solid #ccc;":""}\n                "></button>\n              `).join("")}\n            </div>\n            \n            \x3c!-- Add lasso operation buttons --\x3e\n            <button class="lasso-delete-btn" style="display: none; border: none; background: #f4f4f4; border-radius: 50%; width: 32px; height: 32px; font-size: 14px; cursor: pointer; margin-left: 8px;">üóëÔ∏è</button>\n            <button class="lasso-copy-btn" style="display: none; border: none; background: #f4f4f4; border-radius: 50%; width: 32px; height: 32px; font-size: 14px; cursor: pointer; margin-left: 8px;">üìã</button>\n            \n            \x3c!-- Add expand button --\x3e\n            <button class="toolbar-expand" style="border: none; background: #f4f4f4; border-radius: 50%; width: 32px; height: 32px; font-size: 14px; cursor: pointer; margin-left: 8px;">‚§¢</button>\n          </div>\n        </div>\n      `,setTimeout(()=>{"function"==typeof callback&&callback()},0)}getToolIcon(t){return{pencil:"‚úèÔ∏è",pen:"üñäÔ∏è",marker:"üñçÔ∏è",eraser:"üßΩ",lasso:"üî≤",ruler:"üìè"}[t]||"üñäÔ∏è"}setupCanvas(){this.canvas=this.container.querySelector(".sketch-canvas"),this.ctx=this.canvas.getContext("2d"),this.strokes=[],this.undoneStrokes=[],this.currentStroke=null,this.drawing=!1,this.currentTool="pencil",this.currentColor=this.config.colors[0],this.thickness=3}setupTools(){this.container.querySelectorAll(".tool-btn").forEach(t=>{t.addEventListener("click",()=>{this.setActiveTool(t.dataset.tool)})}),this.container.querySelectorAll(".color-swatch").forEach(t=>{t.addEventListener("click",()=>{this.setActiveColor(t.dataset.color)})}),this.setActiveTool("pencil"),this.setActiveColor(this.config.colors[0])}setupEventListeners(){this.canvas.addEventListener("pointerdown",t=>this.startDraw(t)),this.canvas.addEventListener("pointermove",t=>this.draw(t)),this.canvas.addEventListener("pointerup",t=>this.endDraw(t)),this.container.querySelector(".thickness-slider").addEventListener("input",t=>{this.thickness=parseInt(t.target.value)}),this.container.querySelector(".undo-btn").addEventListener("click",()=>this.undo()),this.container.querySelector(".redo-btn").addEventListener("click",()=>this.redo()),this.container.querySelector(".export-btn").addEventListener("click",()=>this.exportDrawing()),this.canvas.addEventListener("pointerdown",t=>this.handleLassoStart(t)),this.canvas.addEventListener("pointermove",t=>this.handleLassoMove(t)),this.canvas.addEventListener("pointerup",t=>this.handleLassoEnd(t)),this.canvas.addEventListener("pointerdown",t=>this.handleRulerStart(t)),this.canvas.addEventListener("pointermove",t=>this.handleRulerMove(t)),this.canvas.addEventListener("pointerup",t=>this.handleRulerEnd(t)),this.canvas.addEventListener("pointerdown",t=>this.handlePanStart(t)),this.canvas.addEventListener("pointermove",t=>this.handlePanMove(t)),this.canvas.addEventListener("pointerup",t=>this.handlePanEnd(t)),this.container.querySelector(".lasso-delete-btn").addEventListener("click",()=>this.deleteLassoSelection()),this.container.querySelector(".lasso-copy-btn").addEventListener("click",()=>this.copyLassoSelection()),this.container.querySelector(".toolbar-expand").addEventListener("click",()=>this.toggleToolbar()),("100%"===this.config.width||"100%"===this.config.height||"string"==typeof this.config.width&&this.config.width.includes("%")||"string"==typeof this.config.height&&this.config.height.includes("%"))&&t.addEventListener("resize",()=>{clearTimeout(this.resizeTimeout),this.resizeTimeout=setTimeout(()=>this.resize(),100)})}setActiveTool(t){this.currentTool=t,this.container.querySelectorAll(".tool-btn").forEach(s=>{s.style.background=s.dataset.tool===t?"#d0eaff":"#f4f4f4"})}setActiveColor(t){this.currentColor=t,this.container.querySelectorAll(".color-swatch").forEach(s=>{s.style.transform=s.dataset.color===t?"scale(1.1)":"scale(1)",s.style.border=s.dataset.color===t?"2px solid #007aff":"1px solid #e0e0e0"})}startDraw(t){this.isValidPointer(t)&&"lasso"!==this.currentTool&&"ruler"!==this.currentTool&&(this.drawing=!0,this.currentStroke={tool:this.currentTool,color:"eraser"===this.currentTool?"#fff":this.currentColor,thickness:this.toolThickness[this.currentTool]||this.thickness,points:[{x:t.offsetX,y:t.offsetY}]})}draw(t){this.drawing&&this.currentStroke&&this.isValidPointer(t)&&(this.addPoint(this.currentStroke.points,t.offsetX,t.offsetY,1.5),this.redraw())}addPoint(t,s,e,i=1.5){if(0===t.length)return void t.push({x:s,y:e});const o=t[t.length-1],n=s-o.x,r=e-o.y;n*n+r*r>i*i&&t.push({x:s,y:e})}endDraw(t){this.drawing&&this.currentStroke&&(this.strokes.push(this.currentStroke),this.currentStroke=null,this.drawing=!1,this.undoneStrokes=[],this.redraw())}redraw(){this.ctx.clearRect(0,0,this.actualWidth,this.actualHeight),this.ctx.save(),this.ctx.translate(0,this.panY);for(const t of this.strokes)this.drawStroke(t);this.currentStroke&&this.drawStroke(this.currentStroke),this.ctx.restore(),this.rulerActive&&this.drawRuler(),(this.lassoActive||this.lassoSelectedStrokes.length>0)&&this.drawLasso(!0)}resize(){const t=this.container.getBoundingClientRect(),s="100%"===this.config.width?t.width:"string"==typeof this.config.width&&this.config.width.includes("%")?parseFloat(this.config.width)/100*t.width:parseInt(this.config.width),e="100%"===this.config.height?t.height:"string"==typeof this.config.height&&this.config.height.includes("%")?parseFloat(this.config.height)/100*t.height:parseInt(this.config.height);this.actualWidth=s||800,this.actualHeight=e||600,this.canvas.width=this.actualWidth,this.canvas.height=this.actualHeight,this.canvas.style.width=this.actualWidth+"px",this.canvas.style.height=this.actualHeight+"px",this.redraw()}drawStroke(t){this.ctx.save(),this.ctx.strokeStyle=t.color,this.ctx.lineCap="round",this.ctx.lineJoin="round","marker"===t.tool?(this.ctx.globalAlpha=.3,this.ctx.shadowColor=t.color,this.ctx.shadowBlur=8):"pen"===t.tool?(this.ctx.globalAlpha=.7,this.ctx.shadowBlur=0):"pencil"===t.tool?(this.ctx.globalAlpha=.6,this.ctx.setLineDash([.5,2]),this.ctx.shadowBlur=0):(this.ctx.globalAlpha=1,this.ctx.shadowBlur=0);const s=t.points;if(s.length<2)return this.ctx.beginPath(),this.ctx.arc(s[0].x,s[0].y,t.thickness/2,0,2*Math.PI),this.ctx.fillStyle=t.color,this.ctx.globalAlpha=1,this.ctx.fill(),void this.ctx.restore();const e=this.getCatmullRomSpline(this.movingAverage(s,3),20);this.ctx.beginPath(),this.ctx.moveTo(e[0].x,e[0].y);for(let t=1;t<e.length;t++)this.ctx.lineTo(e[t].x,e[t].y);this.ctx.lineWidth=t.thickness,this.ctx.stroke(),this.ctx.setLineDash([]),this.ctx.restore()}undo(){this.strokes.length>0&&(this.undoneStrokes.push(this.strokes.pop()),this.redraw())}redo(){this.undoneStrokes.length>0&&(this.strokes.push(this.undoneStrokes.pop()),this.redraw())}exportDrawing(){"svg"!==this.config.exportFormat&&"both"!==this.config.exportFormat||this.exportSVG(),"png"!==this.config.exportFormat&&"both"!==this.config.exportFormat||this.exportPNG(),"json"===this.config.exportFormat&&this.exportJSON()}exportSVG(){const t=s.createElementNS("http://www.w3.org/2000/svg","svg");t.setAttribute("width",this.actualWidth),t.setAttribute("height",this.actualHeight),t.setAttribute("viewBox",`0 0 ${this.actualWidth} ${this.actualHeight}`);const e=s.createElementNS("http://www.w3.org/2000/svg","rect");e.setAttribute("width","100%"),e.setAttribute("height","100%"),e.setAttribute("fill",this.config.backgroundColor),t.appendChild(e),this.strokes.forEach(e=>{if(e.points.length<2){const i=s.createElementNS("http://www.w3.org/2000/svg","circle");i.setAttribute("cx",e.points[0].x),i.setAttribute("cy",e.points[0].y),i.setAttribute("r",e.thickness/2),i.setAttribute("fill",e.color),t.appendChild(i)}else{const i=s.createElementNS("http://www.w3.org/2000/svg","path"),o=this.getCatmullRomSpline(this.movingAverage(e.points,3),20);let n=`M ${o[0].x} ${o[0].y}`;for(let t=1;t<o.length;t++)n+=` L ${o[t].x} ${o[t].y}`;i.setAttribute("d",n),i.setAttribute("stroke",e.color),i.setAttribute("stroke-width",e.thickness),i.setAttribute("stroke-linecap","round"),i.setAttribute("stroke-linejoin","round"),i.setAttribute("fill","none"),"marker"===e.tool?(i.setAttribute("opacity","0.3"),i.setAttribute("filter","url(#marker-filter)")):"pen"===e.tool?i.setAttribute("opacity","0.7"):"pencil"===e.tool&&(i.setAttribute("opacity","0.6"),i.setAttribute("stroke-dasharray","0.5 2")),t.appendChild(i)}});const i=s.createElementNS("http://www.w3.org/2000/svg","defs"),o=s.createElementNS("http://www.w3.org/2000/svg","filter");o.setAttribute("id","marker-filter"),o.setAttribute("x","-50%"),o.setAttribute("y","-50%"),o.setAttribute("width","200%"),o.setAttribute("height","200%");const n=s.createElementNS("http://www.w3.org/2000/svg","feGaussianBlur");n.setAttribute("stdDeviation","1"),o.appendChild(n),i.appendChild(o),t.insertBefore(i,t.firstChild);const r=(new XMLSerializer).serializeToString(t),h=new Blob([r],{type:"image/svg+xml"}),a=URL.createObjectURL(h),l=s.createElement("a");l.download="sketch.svg",l.href=a,l.click(),URL.revokeObjectURL(a)}exportPNG(){const t=s.createElement("a");t.download="sketch.png",t.href=this.canvas.toDataURL("image/png"),t.click()}exportJSON(){const t={version:"1.0",width:this.actualWidth,height:this.actualHeight,backgroundColor:this.config.backgroundColor,strokes:this.strokes.map(t=>({tool:t.tool,color:t.color,thickness:t.thickness,points:t.points}))},e=JSON.stringify(t),i=new Blob([e],{type:"application/json"}),o=URL.createObjectURL(i),n=s.createElement("a");n.download="sketch.json",n.href=o,n.click(),URL.revokeObjectURL(o)}clear(){this.strokes=[],this.undoneStrokes=[],this.redraw()}getStrokes(){return[...this.strokes]}loadStrokes(t){this.strokes=t,"100%"===this.config.width||"100%"===this.config.height?this.resize():this.redraw()}initializeState(){}handleLassoStart(t){"lasso"===this.currentTool&&(this.lassoSelectedStrokes.length>0&&this.pointInPolygon({x:t.offsetX,y:t.offsetY},this.lassoPoints)?(this.lassoDragging=!0,this.lassoDragStart={x:t.offsetX,y:t.offsetY},this.lassoLastPos={x:t.offsetX,y:t.offsetY}):(this.lassoActive=!0,this.lassoPoints=[{x:t.offsetX,y:t.offsetY}],this.lassoSelectedStrokes=[],this.updateLassoButtons(!1)))}handleLassoMove(t){if("lasso"===this.currentTool)if(this.lassoDragging&&this.lassoSelectedStrokes.length>0){const s=t.offsetX-this.lassoLastPos.x,e=t.offsetY-this.lassoLastPos.y;this.lassoSelectedStrokes.forEach(t=>{t.points.forEach(t=>{t.x+=s,t.y+=e})}),this.lassoPoints.forEach(t=>{t.x+=s,t.y+=e}),this.lassoLastPos={x:t.offsetX,y:t.offsetY},this.redraw(),this.drawLasso(!0)}else this.lassoActive&&(this.lassoPoints.push({x:t.offsetX,y:t.offsetY}),this.redraw(),this.drawLasso())}handleLassoEnd(t){"lasso"===this.currentTool&&(this.lassoDragging?(this.lassoDragging=!1,this.lassoDragStart=null,this.lassoLastPos=null):this.lassoActive&&(this.lassoActive=!1,this.lassoPoints.length>2&&(this.lassoPoints.push(this.lassoPoints[0]),this.lassoSelectedStrokes=this.strokes.filter(t=>this.strokeInLasso(t,this.lassoPoints)),this.updateLassoButtons(!0)),this.redraw(),this.drawLasso(!0)))}drawLasso(t=!1){if(!(this.lassoPoints.length<2)){this.ctx.save(),this.ctx.strokeStyle=t?"#007aff":"#aaa",this.ctx.setLineDash([4,4]),this.ctx.lineWidth=2,this.ctx.beginPath(),this.ctx.moveTo(this.lassoPoints[0].x,this.lassoPoints[0].y);for(let t=1;t<this.lassoPoints.length;t++)this.ctx.lineTo(this.lassoPoints[t].x,this.lassoPoints[t].y);if(this.ctx.stroke(),this.ctx.setLineDash([]),this.ctx.restore(),t&&this.lassoSelectedStrokes.length>0)for(const t of this.lassoSelectedStrokes)this.highlightStroke(t)}}highlightStroke(t){this.ctx.save(),this.ctx.strokeStyle="#007aff",this.ctx.lineWidth=(t.thickness||3)+6,this.ctx.globalAlpha=.2,this.ctx.beginPath();const s=t.points;this.ctx.moveTo(s[0].x,s[0].y);for(let t=1;t<s.length;t++)this.ctx.lineTo(s[t].x,s[t].y);this.ctx.stroke(),this.ctx.restore()}strokeInLasso(t,s){return t.points.some(t=>this.pointInPolygon(t,s))}pointInPolygon(t,s){let e=!1;for(let i=0,o=s.length-1;i<s.length;o=i++){const n=s[i].x,r=s[i].y,h=s[o].x,a=s[o].y;r>t.y!=a>t.y&&t.x<(h-n)*(t.y-r)/(a-r+1e-5)+n&&(e=!e)}return e}updateLassoButtons(t){this.container.querySelector(".lasso-delete-btn").style.display=t?"block":"none",this.container.querySelector(".lasso-copy-btn").style.display=t?"block":"none"}deleteLassoSelection(){this.lassoSelectedStrokes.length>0&&(this.strokes=this.strokes.filter(t=>!this.lassoSelectedStrokes.includes(t)),this.lassoSelectedStrokes=[],this.lassoPoints=[],this.updateLassoButtons(!1),this.redraw())}copyLassoSelection(){if(this.lassoSelectedStrokes.length>0){const t=30,s=this.lassoSelectedStrokes.map(s=>({...s,points:s.points.map(s=>({x:s.x+t,y:s.y+t}))}));this.strokes=this.strokes.concat(s),this.redraw()}}handleRulerStart(t){"ruler"===this.currentTool&&(this.rulerActive=!0,this.rulerStart={x:t.offsetX,y:t.offsetY},this.rulerEnd={x:t.offsetX,y:t.offsetY})}handleRulerMove(t){"ruler"===this.currentTool&&this.rulerActive&&(this.rulerEnd=this.snapToAngle(this.rulerStart,{x:t.offsetX,y:t.offsetY}),this.redraw(),this.drawRuler())}handleRulerEnd(t){"ruler"===this.currentTool&&this.rulerActive&&(this.rulerActive=!1,this.strokes.push({tool:"pen",color:this.currentColor,thickness:this.thickness,points:[this.rulerStart,this.rulerEnd]}),this.rulerStart=null,this.rulerEnd=null,this.redraw())}drawRuler(){this.rulerStart&&this.rulerEnd&&(this.ctx.save(),this.ctx.strokeStyle="#007aff",this.ctx.lineWidth=3,this.ctx.setLineDash([8,8]),this.ctx.beginPath(),this.ctx.moveTo(this.rulerStart.x,this.rulerStart.y),this.ctx.lineTo(this.rulerEnd.x,this.rulerEnd.y),this.ctx.stroke(),this.ctx.setLineDash([]),this.ctx.restore())}snapToAngle(t,s){const e=s.x-t.x,i=s.y-t.y,o=Math.atan2(i,e),n=Math.PI/12,r=Math.round(o/n)*n,h=Math.sqrt(e*e+i*i);return{x:t.x+Math.cos(r)*h,y:t.y+Math.sin(r)*h}}getCatmullRomSpline(t,s=20){if(t.length<2)return t;const e=[];for(let i=0;i<t.length-1;i++){const o=t[i-1]||t[i],n=t[i],r=t[i+1]||t[i],h=t[i+2]||r;for(let t=0;t<s;t++){const i=t/s,a=.5*(2*n.x+(-o.x+r.x)*i+(2*o.x-5*n.x+4*r.x-h.x)*i*i+(-o.x+3*n.x-3*r.x+h.x)*i*i*i),l=.5*(2*n.y+(-o.y+r.y)*i+(2*o.y-5*n.y+4*r.y-h.y)*i*i+(-o.y+3*n.y-3*r.y+h.y)*i*i*i);e.push({x:a,y:l})}}return e.push(t[t.length-1]),e}movingAverage(t,s=3){if(t.length<=s)return t;const e=[];for(let i=0;i<t.length;i++){let o=0,n=0,r=0;for(let e=Math.max(0,i-s);e<=Math.min(t.length-1,i+s);e++)o+=t[e].x,n+=t[e].y,r++;e.push({x:o/r,y:n/r})}return e}isValidPointer(t){return"touch"!==t.pointerType||!(!1===t.isPrimary||t.width>40||t.height>40)}handlePanStart(t){("move"===this.currentTool||"touch"===t.pointerType&&1===t.button)&&(this.isPanning=!0,this.lastPanY=t.clientY)}handlePanMove(t){this.isPanning&&(this.panY+=t.clientY-this.lastPanY,this.lastPanY=t.clientY,this.redraw())}handlePanEnd(){this.isPanning=!1}toggleToolbar(){this.container.querySelector(".sketch-toolbar").classList.toggle("collapsed")}}t.SketchWidget=i,s.addEventListener("DOMContentLoaded",()=>{s.querySelectorAll("[data-sketch-widget]").forEach(t=>{const s={};t.dataset.width&&(s.width=parseInt(t.dataset.width)),t.dataset.height&&(s.height=parseInt(t.dataset.height)),t.dataset.backgroundColor&&(s.backgroundColor=t.dataset.backgroundColor),t.dataset.exportFormat&&(s.exportFormat=t.dataset.exportFormat),new i(t,s)})})}(window,document);