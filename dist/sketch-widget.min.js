!function(t,e){"use strict";const n={width:800,height:600,backgroundColor:"#fcfcfa",tools:["pencil","pen","marker","eraser","lasso","ruler"],colors:["#000000","#FF3B30","#FF9500","#FFCC00","#4CD964","#5AC8FA","#0579FF","#5856D6","#FFFFFF"],exportFormat:"svg",theme:"light"};class s{constructor(t,s={}){if(this.config={...n,...s},this.container="string"==typeof t?e.querySelector(t):t,!this.container)throw new Error("SketchWidget: Container element not found");this.init()}init(){this.createHTML(),this.setupCanvas(),this.setupTools(),this.setupEventListeners(),this.initializeState()}createHTML(){this.container.innerHTML=`\n        <div class="sketch-widget" style="position: relative; display: inline-block;">\n          <div class="canvas-container" style="display: flex; justify-content: center; align-items: flex-start; margin-bottom: 20px;">\n            <canvas class="sketch-canvas" width="${this.config.width}" height="${this.config.height}" style="\n              background: ${this.config.backgroundColor};\n              border-radius: 12px;\n              box-shadow: 0 4px 16px rgba(0,0,0,0.1);\n              border: 1px solid #e0e0e0;\n              touch-action: none;\n              -webkit-user-select: none;\n              user-select: none;\n            "></canvas>\n          </div>\n          <div class="sketch-toolbar" style="\n            display: flex;\n            align-items: center;\n            background: #fff;\n            box-shadow: 0 4px 16px rgba(0,0,0,0.1);\n            padding: 8px 16px;\n            gap: 8px;\n            border-radius: 20px;\n            justify-content: center;\n            margin: 0 auto;\n            width: fit-content;\n          ">\n            <div class="toolbar-tools" style="\n              display: grid;\n              grid-template-columns: repeat(3, 1fr);\n              gap: 4px;\n              border-right: 1px solid #e0e0e0;\n              padding-right: 12px;\n            ">\n              ${this.config.tools.map(t=>`\n                <button class="tool-btn" data-tool="${t}" style="\n                  border: none;\n                  background: #f4f4f4;\n                  border-radius: 50%;\n                  width: 32px;\n                  height: 32px;\n                  font-size: 14px;\n                  cursor: pointer;\n                  transition: all 0.2s;\n                " title="${t.charAt(0).toUpperCase()+t.slice(1)}">${this.getToolIcon(t)}</button>\n              `).join("")}\n            </div>\n            <div class="toolbar-controls" style="\n              display: flex;\n              gap: 6px;\n              align-items: center;\n              border-right: 1px solid #e0e0e0;\n              padding-right: 12px;\n            ">\n              <input type="range" class="thickness-slider" min="1" max="30" value="3" style="\n                width: 60px;\n                height: 4px;\n                border-radius: 4px;\n                background: #e0e0e0;\n              ">\n              <button class="undo-btn" style="\n                border: none;\n                background: #f4f4f4;\n                border-radius: 50%;\n                width: 32px;\n                height: 32px;\n                font-size: 14px;\n                cursor: pointer;\n              ">‚Ü©Ô∏è</button>\n              <button class="redo-btn" style="\n                border: none;\n                background: #f4f4f4;\n                border-radius: 50%;\n                width: 32px;\n                height: 32px;\n                font-size: 14px;\n                cursor: pointer;\n              ">‚Ü™Ô∏è</button>\n              <button class="export-btn" style="\n                border: none;\n                background: #f4f4f4;\n                border-radius: 50%;\n                width: 32px;\n                height: 32px;\n                font-size: 14px;\n                cursor: pointer;\n              ">üíæ</button>\n            </div>\n            <div class="color-swatches" style="\n              display: flex;\n              gap: 4px;\n              flex-wrap: wrap;\n              max-width: 120px;\n            ">\n              ${this.config.colors.map(t=>`\n                <button class="color-swatch" data-color="${t}" style="\n                  width: 18px;\n                  height: 18px;\n                  border-radius: 50%;\n                  border: 1px solid #e0e0e0;\n                  background: ${t};\n                  cursor: pointer;\n                  transition: all 0.2s;\n                ${"#FFFFFF"===t?"border: 1px solid #ccc;":""}\n                "></button>\n              `).join("")}\n            </div>\n          </div>\n        </div>\n      `}getToolIcon(t){return{pencil:"‚úèÔ∏è",pen:"üñäÔ∏è",marker:"üñçÔ∏è",eraser:"üßΩ",lasso:"üî≤",ruler:"üìè"}[t]||"üñäÔ∏è"}setupCanvas(){this.canvas=this.container.querySelector(".sketch-canvas"),this.ctx=this.canvas.getContext("2d"),this.strokes=[],this.undoneStrokes=[],this.currentStroke=null,this.drawing=!1,this.currentTool="pencil",this.currentColor=this.config.colors[0],this.thickness=3}setupTools(){this.container.querySelectorAll(".tool-btn").forEach(t=>{t.addEventListener("click",()=>{this.setActiveTool(t.dataset.tool)})}),this.container.querySelectorAll(".color-swatch").forEach(t=>{t.addEventListener("click",()=>{this.setActiveColor(t.dataset.color)})}),this.setActiveTool("pencil"),this.setActiveColor(this.config.colors[0])}setupEventListeners(){this.canvas.addEventListener("pointerdown",t=>this.startDraw(t)),this.canvas.addEventListener("pointermove",t=>this.draw(t)),this.canvas.addEventListener("pointerup",t=>this.endDraw(t)),this.container.querySelector(".thickness-slider").addEventListener("input",t=>{this.thickness=parseInt(t.target.value)}),this.container.querySelector(".undo-btn").addEventListener("click",()=>this.undo()),this.container.querySelector(".redo-btn").addEventListener("click",()=>this.redo()),this.container.querySelector(".export-btn").addEventListener("click",()=>this.exportDrawing())}setActiveTool(t){this.currentTool=t,this.container.querySelectorAll(".tool-btn").forEach(e=>{e.style.background=e.dataset.tool===t?"#d0eaff":"#f4f4f4"})}setActiveColor(t){this.currentColor=t,this.container.querySelectorAll(".color-swatch").forEach(e=>{e.style.transform=e.dataset.color===t?"scale(1.1)":"scale(1)",e.style.border=e.dataset.color===t?"2px solid #007aff":"1px solid #e0e0e0"})}startDraw(t){this.drawing=!0,this.currentStroke={tool:this.currentTool,color:this.currentColor,thickness:this.thickness,points:[{x:t.offsetX,y:t.offsetY}]}}draw(t){if(!this.drawing||!this.currentStroke)return;const e={x:t.offsetX,y:t.offsetY};this.currentStroke.points.push(e),this.redraw()}endDraw(t){this.drawing&&this.currentStroke&&(this.strokes.push(this.currentStroke),this.currentStroke=null,this.drawing=!1,this.undoneStrokes=[],this.redraw())}redraw(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),[...this.strokes,this.currentStroke].filter(Boolean).forEach(t=>{this.drawStroke(t)})}drawStroke(t){if(this.ctx.save(),this.ctx.strokeStyle=t.color,this.ctx.lineWidth=t.thickness,this.ctx.lineCap="round",this.ctx.lineJoin="round",t.points.length<2)this.ctx.beginPath(),this.ctx.arc(t.points[0].x,t.points[0].y,t.thickness/2,0,2*Math.PI),this.ctx.fillStyle=t.color,this.ctx.fill();else{this.ctx.beginPath(),this.ctx.moveTo(t.points[0].x,t.points[0].y);for(let e=1;e<t.points.length;e++)this.ctx.lineTo(t.points[e].x,t.points[e].y);this.ctx.stroke()}this.ctx.restore()}undo(){this.strokes.length>0&&(this.undoneStrokes.push(this.strokes.pop()),this.redraw())}redo(){this.undoneStrokes.length>0&&(this.strokes.push(this.undoneStrokes.pop()),this.redraw())}exportDrawing(){"svg"!==this.config.exportFormat&&"both"!==this.config.exportFormat||this.exportSVG(),"png"!==this.config.exportFormat&&"both"!==this.config.exportFormat||this.exportPNG()}exportSVG(){const t=e.createElementNS("http://www.w3.org/2000/svg","svg");t.setAttribute("width",this.canvas.width),t.setAttribute("height",this.canvas.height),t.setAttribute("viewBox",`0 0 ${this.canvas.width} ${this.canvas.height}`);const n=e.createElementNS("http://www.w3.org/2000/svg","rect");n.setAttribute("width","100%"),n.setAttribute("height","100%"),n.setAttribute("fill",this.config.backgroundColor),t.appendChild(n),this.strokes.forEach(n=>{if(n.points.length<2){const s=e.createElementNS("http://www.w3.org/2000/svg","circle");s.setAttribute("cx",n.points[0].x),s.setAttribute("cy",n.points[0].y),s.setAttribute("r",n.thickness/2),s.setAttribute("fill",n.color),t.appendChild(s)}else{const s=e.createElementNS("http://www.w3.org/2000/svg","path");let o=`M ${n.points[0].x} ${n.points[0].y}`;for(let t=1;t<n.points.length;t++)o+=` L ${n.points[t].x} ${n.points[t].y}`;s.setAttribute("d",o),s.setAttribute("stroke",n.color),s.setAttribute("stroke-width",n.thickness),s.setAttribute("stroke-linecap","round"),s.setAttribute("stroke-linejoin","round"),s.setAttribute("fill","none"),t.appendChild(s)}});const s=(new XMLSerializer).serializeToString(t),o=new Blob([s],{type:"image/svg+xml"}),i=URL.createObjectURL(o),r=e.createElement("a");r.download="sketch.svg",r.href=i,r.click(),URL.revokeObjectURL(i)}exportPNG(){const t=e.createElement("a");t.download="sketch.png",t.href=this.canvas.toDataURL("image/png"),t.click()}clear(){this.strokes=[],this.undoneStrokes=[],this.redraw()}getStrokes(){return[...this.strokes]}loadStrokes(t){this.strokes=t,this.redraw()}initializeState(){}}t.SketchWidget=s,e.addEventListener("DOMContentLoaded",()=>{e.querySelectorAll("[data-sketch-widget]").forEach(t=>{const e={};t.dataset.width&&(e.width=parseInt(t.dataset.width)),t.dataset.height&&(e.height=parseInt(t.dataset.height)),t.dataset.backgroundColor&&(e.backgroundColor=t.dataset.backgroundColor),t.dataset.exportFormat&&(e.exportFormat=t.dataset.exportFormat),new s(t,e)})})}(window,document);